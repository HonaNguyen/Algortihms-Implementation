#include<bits/stdc++.h>
#pragma GCC optimzie "Ofast"
#define prob "3E"
#define ll long long
#define fi first
#define se second
using namespace std;
const int maxn = 1e4;
const int MOD = 1e9 + 7;
const ll INF = 9e18;
const int dx[] = {-1,0,1,0};
const int dy[] = {0,1,0,-1};
typedef pair<int,int> pi;
void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

int N,K;
ll x[maxn+5];
ll dp[101][maxn+5];
/// Divide And Conqueror Optimization
/// cost of segment (i,j]
long long Cost(int i,int j){
    return (x[j] - x[i]) * (x[j] - x[i]);
}

/// search range [optL,optR], calculating dp[k][L ... R]
void dnc(int L,int R,int optL,int optR,int k){
//    debug(cL,cR);
    if(L > R) return;
    int mid = (L + R) >> 1;
    pair<ll,int> best = {INF,-1};
    for(int i=optL;i<=min(optR,mid);i++){
        best = min(best, {dp[k-1][i-1] + Cost(i,mid), i});
    }
    dp[k][mid] = best.first;
    int opt = best.second;
    dnc(L,mid-1,optL,opt,k);
    dnc(mid+1,R,opt,optR,k);
}
void solve(){
    cin >> N >> K;
    for(int i=1;i<=N;i++) cin >> x[i];
    sort(x+1,x+N+1);
    for(int i=1;i<=N;i++) dp[1][i] = Cost(1,i);
    for(int k=2;k<=K;k++) dnc(1,N,1,N,k);
    cout << dp[K][N];
}
int main(){
    if(fopen(prob".inp","r")){
        freopen(prob".inp","r",stdin);
        freopen(prob".out","w",stdout);
    }
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int tc = 1;
//    cin >> tc;
    while(tc--) solve();
}

/*
    https://cp-algorithms.com/dynamic_programming/divide-and-conquer-dp.html
    We have to minimize /// dp[k][i] = min(dp[k-1][j-1] + Cost(j,i)) 0 <= k <= j
*/

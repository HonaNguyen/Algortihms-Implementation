#include<bits/stdc++.h>
#pragma GCC optimzie "Ofast"
#define prob "3A"
#define ll long long
#define fi first
#define se second
using namespace std;
const int maxn = 1e5;
const int MOD = 1e9 + 7;
const int dx[] = {-1,0,1,0};
const int dy[] = {0,1,0,-1};
typedef pair<int,int> pi;
void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "," : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#ifndef ONLINE_JUDGE
#define debug(x...) cerr << "[" << #x << "] = ["; _print(x)
#else
#define debug(x...)
#endif

vector<pair<ll,ll>> all_lines;

long double intersection(pair<ll,ll> line1,pair<ll,ll> line2){
    return (long double)(line1.se - line2.se) / (line2.fi - line1.fi);
}
bool can_delete(pair<ll,ll> line1, pair<ll,ll> line2, pair<ll,ll> line3){
    return intersection(line1,line2) < intersection(line2,line3);
}
void add_line(ll k, ll b){
    pair<ll,ll> new_line  = make_pair(k,b);
    while(all_lines.size() >= 2 && can_delete(all_lines[all_lines.size()-2],
                                   all_lines.back(),new_line)){
        all_lines.pop_back();
    }
    all_lines.push_back(new_line);
}
ll compute_min(ll x){
    ll min_val = 9e18;
    for(auto &line: all_lines){
        min_val = min(min_val, line.fi * x + line.second);
    }
    return min_val;
}
void solve(){
    int n;
    cin >> n;
    vector<ll> x(n+1), a(n+1), b(n+1);
    for(int i=1;i<=n;i++) cin >> x[i] >> a[i] >> b[i];
    add_line(0,0);
    vector<ll> dp(n+1);
    for(int i=1;i<=n;i++){
        ll F = compute_min(-b[i]);
        F += (x[i] * b[i] + a[i]);
        dp[i] = F;
        cout << F << endl;
        add_line(x[i],dp[i]);
    }
}
int main(){
    if(fopen(prob".inp","r")){
        freopen(prob".inp","r",stdin);
        freopen(prob".out","w",stdout);
    }
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    int tc = 1;
//    cin >> tc;
    while(tc--) solve();
}
/*
  https://cp-algorithms.com/geometry/convex_hull_trick.html
  We have to minimize: dp[i] = min(dp[j] + x[i] * b[i] + a[i]) with b[i] is increasing
*/
